(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{197:function(e,a,t){"use strict";t.r(a);var n=t(6),s=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"syntax-introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax-introduction"}},[e._v("#")]),e._v(" Syntax introduction")]),e._v(" "),a("p",[e._v("The syntax that "),a("name-self"),e._v(" uses is configurable. There is a standard\nversion that you will learn about first in this guide.")],1),e._v(" "),a("p",[e._v("​"),a("name-self"),e._v(" syntax is a super set of traditional\n"),a("em",[e._v("JSON")]),e._v(". Every valid "),a("em",[e._v("JSON")]),e._v(" document is also a valid "),a("name-self"),e._v("\ndocument.")],1),e._v(" "),a("h2",{attrs:{id:"developer-experience"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#developer-experience"}},[e._v("#")]),e._v(" Developer experience")]),e._v(" "),a("p",[e._v("The developer experience when using "),a("em",[e._v("JSON")]),e._v(" is OK but not great. When\n"),a("em",[e._v("JSON")]),e._v(" is used for editable documents, say for configuration, things\nget tricky. The lack of comments make life more difficult than it\nneeds to be. The ceremony of quoting all strings is tedious. And\ndealing with multi-line strings is really nasty.")]),e._v(" "),a("p",[e._v("There are many extensions to "),a("em",[e._v("JSON")]),e._v(" that solve these problems (and\nothers) in various ways.  All the alternatives that I know about are\nlisted on the "),a("a",{attrs:{href:"/guide/alternatives"}},[e._v("alternatives")]),e._v(" page.")]),e._v(" "),a("p",[e._v("I have taken as many of the good ideas as possible, and combined them\ninto a configurable "),a("em",[e._v("JSON")]),e._v(" parser. The basic guiding is: if it isn't\nambiguous, it's cool.")]),e._v(" "),a("p",[e._v("​"),a("name-self"),e._v(" is also something else&emdash;an\nextensible parser. If you want to add your own little Domain Specific\nLanguages (DSL) into your "),a("em",[e._v("JSON")]),e._v(" documents, "),a("name-self"),e._v(" is built\nexactly for that purpose! See\nthe "),a("a",{attrs:{href:"/guide/custom-parsers"}},[e._v("custom parsers")]),e._v(" section for a guide to\nwriting your own "),a("em",[e._v("JSON")]),e._v("-based DSLs with "),a("name-self")],1),e._v(" "),a("h2",{attrs:{id:"walkthrough"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#walkthrough"}},[e._v("#")]),e._v(" Walkthrough")]),e._v(" "),a("p",[e._v("Let's first informally describe the syntax extensions that\n"),a("name-self"),e._v(" provides. For a slightly more formal description, See\nthe "),a("RouterLink",{attrs:{to:"/ref/#railroad-diagrams"}},[e._v("railroad diagrams")]),e._v(" section.")],1),e._v(" "),a("p",[e._v("​"),a("name-self"),e._v(" is an extension\nof "),a("a",{attrs:{href:"https://json.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSON"),a("OutboundLink")],1),e._v(", so all the usual rules of "),a("em",[e._v("JSON")]),e._v(" syntax\nstill work.")],1),e._v(" "),a("h3",{attrs:{id:"comments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[e._v("#")]),e._v(" Comments")]),e._v(" "),a("p",[e._v("Single line comments can be introduced by "),a("code",[e._v("#")]),e._v(" or "),a("code",[e._v("//")]),e._v(" and run to the\nend of the current line:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "a": 1, # a comment\n  "b": 2, // also a comment\n}\n')])])]),a("p",[e._v("You also get multi-line comments with:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "a": 1,\n  /* \n   * A Multiline comment\n   */\n  "b": 2,\n  "foo": foo,\n}\n\n')])])]),a("p",[e._v("Sometimes you need to comment out a section that already has a\nmulti-line comment within it. This can be annoying with traditional\nmulti-line syntax, as the multi-line comment ends with the first end\nmarker ("),a("code",[e._v("*/")]),e._v(") seen.  "),a("name-self"),e._v(" allows multi-line comments to nest\nso you don't have to worry about this anymore:")],1),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "a": 1,\n  /* \n   * /* a multi-line comment\n   *  * inside a multi-line comment.\n   *  */\n   */\n  "b": 2,\n}\n\n')])])]),a("p",{staticStyle:{color:"#888","text-align":"right","margin-top":"-20px"}},[a("small",{staticStyle:{"font-size":"10px"}},[e._v("(Even the syntax highlighter struggles with this one!)")])]),e._v(" "),a("h3",{attrs:{id:"keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keys"}},[e._v("#")]),e._v(" Keys")]),e._v(" "),a("p",[e._v("You don't have to quote keys. This deals with the most tedious part of\nediting pure "),a("em",[e._v("JSON")]),e._v(" by hand. We go a little easier than pure\n"),a("code",[e._v("JavaScript")]),e._v(" too—you only have to quote keys if they contain\nspaces or punctuation.")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n{               {\n  a: 1,           "a": 1,\n  1: 2,           "1": 2,\n  1a: 3,          "1a": 3,\n  "1 a": 4,       "1 a": 4,\n  "{}": 5,         "{}": 5,\n  true: 6         "true": 6\n}               }\n')])])]),a("h3",{attrs:{id:"commas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commas"}},[e._v("#")]),e._v(" Commas")]),e._v(" "),a("p",[e._v("This is another essential convenience. You can having trailing commas,\nwhich makes cut-and-paste editing much easier.")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n{               {\n  a: 1,           "a": 1,\n  1: 2,           "1": 2\n}               }\n')])])]),a("p",[e._v("Actually, you don't need commas at all. Spaces, tabs, new lines and "),a("em",[e._v("nothing")]),e._v(" also\nseparate elements for you:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n{               {\n  a: 1           "a": 1,\n  1: 2           "1": 2,\n  b: [3 4]       "b": [3, 4]\n  c: [[5][6]]    "c": [[5], [6]] \n}               }\n')])])]),a("p",[e._v("Repeated commas do have a special meaning. Any comma without a\n"),a("strong",[e._v("preceding value")]),e._v(" generates a "),a("code",[e._v("null")]),e._v(" value ("),a("em",[e._v("JSON")]),e._v(" only has "),a("code",[e._v("null")]),e._v(", not\n"),a("code",[e._v("undefined")]),e._v("):")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n[a,]           ["a"]\n[,a]           [null, "a"]\n[,a,]          [null, "a"]\n[,a,,]         [null, "a", null]\n[,,,]          [null, null, null]\n[,,]           [null, null]\n[,]            [null]\n')])])]),a("p",[e._v("You also get "),a("code",[e._v("null")]),e._v(" when a property value is missing:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n{a:,b:}         {"a":null, "b":null}\n')])])]),a("h3",{attrs:{id:"strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[e._v("#")]),e._v(" Strings")]),e._v(" "),a("p",[e._v("Single and double quoted strings work the same way as in JavaScript:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n"a"             "a"\n\'b\'             "b"\n"c\'c"           "c\'c"\n\'d"d\'           "d\\"d"\n\'e\\te\'          "e\\te"\n')])])]),a("p",[e._v("You also get backticks, which are multi-line:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n`a             "a\\nb"\nb`           \n')])])]),a("p",[e._v("And a convenience syntax for indented blocks of text:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// jsonic       // JSON\n  '''           \"red\\ngreen\\nblue\"\n  red                          \n  green\n  blue\n  '''\n")])])]),a("h3",{attrs:{id:"numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numbers"}},[e._v("#")]),e._v(" Numbers")]),e._v(" "),a("p",[e._v("You get all the JavaScript number formats:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// jsonic       // JSON\n20              20\n20.0            20\n2e1             20\n0x14            20\n0o24            20\n0b10100         20\n")])])]),a("p",[e._v("And underscore as way to make large numbers easier to read:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// jsonic       // JSON\n2_000_000       2000000\n")])])]),a("p",[e._v("The special JavaScript number value literals (such as "),a("code",[e._v("Infinity")]),e._v(") are\nnot supported, but you can have them (and other things, like\n"),a("code",[e._v("undefined")]),e._v(") if you use the "),a("a",{attrs:{href:"/plugin/native"}},[e._v("native")]),e._v(" plugin.")]),e._v(" "),a("h3",{attrs:{id:"merges"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merges"}},[e._v("#")]),e._v(" Merges")]),e._v(" "),a("p",[e._v("Duplicate keys merge their values when they are objects or arrays,\notherwise the last value wins.")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic                  // JSON\n{a:1, a:2}                 {"a":2}\n{a:{b:1}, a:{c:2}}         {"a":{"b":1, "c":2}}\n{a:[1,2], a:[3]}           {"a":[3, 2]}\n')])])]),a("h3",{attrs:{id:"shortcuts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shortcuts"}},[e._v("#")]),e._v(" Shortcuts")]),e._v(" "),a("p",[e._v("At the top level, you can skip braces and square brackets:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\na:1,b:2         {"a":1, "b":2}\n1,2             [1, 2]\n')])])]),a("p",[e._v("You can use repeated key-colon pairs to set a single deep property:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\na:b:1           {"a": {"b":1}}\na:b:[2]         {"a": {"b": [2]}}\na:b:2, a:c:3    {"a": {"b": 2, "c":3}}\n')])])]),a("p",[e._v("Open objects and arrays close themselves:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n{a:{b:{c:[1     {"a":{"b":{"c":[1]}}}\n')])])]),a("h3",{attrs:{id:"things-that-still-aren-t-allowed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#things-that-still-aren-t-allowed"}},[e._v("#")]),e._v(" Things that still aren't allowed")]),e._v(" "),a("p",[e._v("You still need to be able to detect actual syntax errors, like misused\npunctuation in property keys or array elements:")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("a{b:1           // nope!\na}b:1           // nope!\na[b:1           // nope!\na]b:1           // nope!\n[{]             // nope!\n[}]             // nope!\n")])])]),a("p",[e._v("Punctuation cannot occur in property values either as it terminates\nthe value (which is what you want).")]),e._v(" "),a("div",{staticClass:"language-jsonic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// jsonic       // JSON\n{a:}            {"a": null}\n{a:{}           {"a": {}}\n{a:]}           // nope!\n{a:[}           // nope!\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);